import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import { Resend } from "resend";

// Kh·ªüi t·∫°o Supabase v√† Resend
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);
const resend = new Resend(process.env.RESEND_API_KEY);

// ‚úÖ API g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
export async function POST(req: Request) {
  try {
    const { fromUserId, fromUsername, toEmail } = await req.json();

    if (!fromUserId || !fromUsername || !toEmail) {
      return NextResponse.json({ error: "Thi·∫øu th√¥ng tin g·ª≠i l·ªùi m·ªùi" }, { status: 400 });
    }

    // 1Ô∏è‚É£ Ki·ªÉm tra xem ng∆∞·ªùi nh·∫≠n c√≥ t·ªìn t·∫°i trong profiles ch∆∞a
    const { data: targetProfile, error: checkError } = await supabase
      .from("profiles")
      .select("id, email")
      .eq("email", toEmail)
      .single();

    if (checkError || !targetProfile) {
      return NextResponse.json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n" }, { status: 404 });
    }

    // 2Ô∏è‚É£ T·∫°o l·ªùi m·ªùi k·∫øt b·∫°n trong DB
    const { data: friendRecord, error: insertError } = await supabase
      .from("friends")
      .insert([
        {
          user_id: fromUserId,
          friend_id: targetProfile.id,
          status: "pending",
        },
      ])
      .select("id")
      .single();

    if (insertError) {
      console.error("Insert friend error:", insertError);
      return NextResponse.json({ error: insertError.message }, { status: 500 });
    }

    const inviteId = friendRecord.id;

    // 3Ô∏è‚É£ T·∫°o URL accept/reject
    const acceptUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/api/private/friend/accept?id=${inviteId}`;
    const rejectUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/api/private/friend/reject?id=${inviteId}`;

    // 4Ô∏è‚É£ G·ª≠i email qua Resend
    const { error: mailError } = await resend.emails.send({
      from: process.env.EMAIL_FROM!,
      to: toEmail,
      subject: "üì® B·∫°n c√≥ l·ªùi m·ªùi k·∫øt b·∫°n m·ªõi!",
      html: `
        <h2>Xin ch√†o!</h2>
        <p><b>${fromUsername}</b> ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n cho b·∫°n tr√™n h·ªá th·ªëng TodoList.</p>
        <p>B·∫°n mu·ªën ch·∫•p nh·∫≠n l·ªùi m·ªùi n√†y ch·ª©?</p>
        <a href="${acceptUrl}" style="background:#16a34a;color:white;padding:10px 16px;border-radius:6px;text-decoration:none;margin-right:8px;">‚úÖ Accept</a>
        <a href="${rejectUrl}" style="background:#dc2626;color:white;padding:10px 16px;border-radius:6px;text-decoration:none;">‚ùå Reject</a>
        <br/><br/>
        <p>Th√¢n m·∫øn,<br/>TodoList App</p>
      `,
    });

    if (mailError) {
      console.error("Send email error:", mailError);
      return NextResponse.json({ error: mailError.message }, { status: 500 });
    }

    // ‚úÖ Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng
    return NextResponse.json({
      success: true,
      message: "L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!",
      inviteId,
    });
  } catch (err) {
    console.error("Friend send error:", err);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
