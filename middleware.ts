// File: middleware.ts (·ªü th∆∞ m·ª•c g·ªëc)
import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export const runtime = 'nodejs';

export async function middleware(req: NextRequest) {
  // T·∫°o response v√† client Supabase cho middleware
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });

  // L·∫•y th√¥ng tin session
  const {
    data: { session },
  } = await supabase.auth.getSession();

  const { pathname } = req.nextUrl;

  // Ki·ªÉm tra session t·ª´ cookie n·∫øu Supabase session kh√¥ng c√≥
  let hasValidSession = !!session;
  if (!hasValidSession) {
    const accessToken = req.cookies.get('sb-access-token')?.value;
    hasValidSession = !!accessToken;
  }

  // Debug logs (c√≥ th·ªÉ remove khi deploy)
  console.log(`[Middleware] Path: ${pathname}, Supabase Session: ${!!session}, Cookie Token: ${!!req.cookies.get('sb-access-token')?.value}, HasValidSession: ${hasValidSession}`);

  // üß± 1. B·∫¢O V·ªÜ API PRIVATE
  if (pathname.startsWith("/api/private")) {
    if (!hasValidSession) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    return res;
  }

  // üß≠ 2. B·∫¢O V·ªÜ TRANG GIAO DI·ªÜN
  const protectedRoutes = ["/calendar", "/list", "/dashboard", "/friends"];
  if (!hasValidSession && protectedRoutes.includes(pathname)) {
    return NextResponse.redirect(new URL("/login", req.url));
  }

  if (hasValidSession && (pathname === "/login" || pathname === "/signup")) {
    return NextResponse.redirect(new URL("/calendar", req.url));
  }

  // ‚úÖ N·∫øu kh√¥ng vi ph·∫°m g√¨ ‚Üí cho ph√©p truy c·∫≠p
  return res;
}

// ‚öôÔ∏è Config ƒë·ªÉ middleware √°p d·ª•ng ƒë√∫ng ph·∫°m vi
export const config = {
  matcher: [
    "/((?!api/public|_next/static|_next/image|favicon.ico).*)",
  ],
};

